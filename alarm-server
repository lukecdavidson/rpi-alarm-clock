#!/bin/python
#
# RPi Alarm Clock server. Listens for alarm events and triggers a buzzer.
#
# Copyright (C) 2025  Luke Davidson  All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import asyncio
import gpiozero
import socketserver
import sys

stop_button = gpiozero.Button(pin=16, pull_up=True, hold_time=1)
pause_button = gpiozero.Button(pin=27, pull_up=True, hold_time=7)
led = gpiozero.LED(pin=26)
buzzer = gpiozero.Buzzer(pin=17)
led.on()
paused = False

def stop_alarm() -> None:
    buzzer.off()

stop_button.when_held = stop_alarm

def toggle_pause(paused) -> None:
    if not paused:
        paused = True
        led.off()
    else:
        paused = False
        led.on()

pause_button.when_held = toggle_pause

def start_alarm(paused) -> None:
    if not paused:
        buzzer.on()

class MyTCPHandler(socketserver.BaseRequestHandler):
    """
    The request handler class for our server.

    It is instantiated once per connection to the server, and must
    override the handle() method to implement communication to the
    client.
    """

    def handle(self) -> None:
        # self.request is the TCP socket connected to the client
        self.data = self.request.recv(1024).strip()
        print("Received from {}:".format(self.client_address[0]))
        print(self.data)
        # just send back the same data, but upper-cased
        #self.request.sendall(self.data.upper())
        match repr(self.data):
            case 'start':
                start_alarm(paused)
            case 'stop':
                stop_alarm()


if __name__ == "__main__":
    HOST, PORT = "localhost", 9999

    # Create the server, binding to localhost on port 9999
    with socketserver.TCPServer((HOST, PORT), MyTCPHandler) as server:
        # Activate the server; this will keep running until you
        # interrupt the program with Ctrl-C
        server.serve_forever()
